name: FFmpeg

on:
  workflow_dispatch:
    inputs:
      config:
        description: 'Configuration'     
        required: true
        default: 'Debug'
        
env:
  vsPath: C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\
  msysConfig: debug
  winConfig: Debug
  cFlags: -MDd
  switches: "--enable-encoder=libvpl --enable-encoder=libsvtav1 --enable-encoder=libsnappy --enable-encoder=libvpx --enable-encoder=libmp3lame --enable-encoder=libzimg --enable-encoder=libopus --enable-encoder=libogg --enable-encoder=libvorbis --enable-encoder=libx264 --enable-encoder=libfdk-aac"
  NASM_EXECUTABLE: nasm
  
jobs:
  liboggvorbis:
    if: ${{ false }}
    runs-on: windows-2019
    steps:
    - name: Set up MSYS2
      uses: msys2/setup-msys2@v2
      with:
        install: base-devel binutils autotools automake
        path-type: inherit
    - name: Set up cache
      uses: actions/cache@v2
      env:
        cache-name: cache-ffmpeg-${{ env.msysConfig }}
      with:
        path: cache
        key: cache-key
    - name: Set up GIT
      run: |
        git config --global core.autocrlf false
        git config --global core.eol lf
    - name: Checkout Ogg
      uses: actions/checkout@v3.0.0
      with:
        repository: xiph/ogg
        ref: master
        path: ogg
    - name: Checkout Vorbis
      uses: actions/checkout@v3.0.0
      with:
        repository: xiph/vorbis
        ref: master
        path: vorbis
    - name: Build Ogg
      shell: cmd
      run: |
        call "${{ env.vsPath }}VC\Auxiliary\Build\vcvars64.bat"
        md build
        D:\a\_temp\setup-msys2\msys2.cmd -c 'cd ogg ; autoreconf -i ; CC=cl.exe CXX=cl.exe CXXFLAGS=${{ env.cFlags }} ./configure --prefix=$(realpath ../build) --disable-shared ; make -j ; make install'
    - name: Build Vorbis
      shell: cmd
      run: |
        call "${{ env.vsPath }}VC\Auxiliary\Build\vcvars64.bat"
        md dist
        D:\a\_temp\setup-msys2\msys2.cmd -c 'cd vorbis ; autoreconf -i ; CC=cl.exe CXX=cl.exe CXXFLAGS=${{ env.cFlags }} ./configure --prefix=$(realpath ../build) --disable-shared ; make -j ; make install ; sed -i '/^Libs\.private.*/d' ../build/lib/pkgconfig/vorbis.pc ; cd ../build ; tar czf ../dist/liboggvorbis.tgz *'
        echo "switches=${{env.switches}} --enable-encoder=libopus --enable-encoder=libvorbis" >> $GITHUB_ENV
    - name: Publish artifact
      uses: actions/upload-artifact@v2
      with:
        name: liboggvorbis
        path: dist/liboggvorbis.tgz
        
  libvpl:
    if: ${{ false }}
    runs-on: windows-2019
    steps:
    - name: Set up MSYS2
      uses: msys2/setup-msys2@v2
      with:
        install: base-devel binutils autotools automake
        path-type: inherit
    - name: Set up cache
      uses: actions/cache@v2
      env:
        cache-name: cache-ffmpeg-${{ env.msysConfig }}
      with:
        path: cache
        key: cache-key
    - name: Set up GIT
      run: |
        git config --global core.autocrlf false
        git config --global core.eol lf
    - name: Checkout oneVPL
      uses: actions/checkout@v3.0.0
      with:
        repository: oneapi-src/oneVPL
        ref: master
        path: onevpl
    - name: Build oneVPL
      shell: cmd
      run: |
        call "${{ env.vsPath }}VC\Auxiliary\Build\vcvars64.bat"
        md temp build dist
        cd temp
        cmake.exe -G "Visual Studio 16 2019" ..\onevpl -T host=x64 -A x64 -DBUILD_TOOLS=OFF -DBUILD_EXAMPLES=OFF -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX=..\build -DCMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD=ON
        MSBuild.exe -t:VPL,INSTALL -p:Configuration=${{ env.winConfig }} -m oneVPL.sln
        D:\a\_temp\setup-msys2\msys2.cmd -c 'cd ../build ; rm -rf bin/cmake ; tar czf ../dist/libvpl.tgz *'
    - name: Publish artifact
      uses: actions/upload-artifact@v2
      with:
        name: libvpl
        path: dist/libvpl.tgz
        
  libsvtav1:
    if: ${{ false }}
    runs-on: windows-2019
    steps:
    - name: Set up MSYS2
      uses: msys2/setup-msys2@v2
      with:
        install: base-devel binutils autotools automake mingw-w64-x86_64-cmake nasm
        path-type: inherit
    - name: Set up cache
      uses: actions/cache@v2
      env:
        cache-name: cache-ffmpeg-${{ env.msysConfig }}
      with:
        path: cache
        key: cache-key
    - name: Set up GIT
      run: |
        git config --global core.autocrlf false
        git config --global core.eol lf
    - name: Checkout SVT AV1
      uses: actions/checkout@v3.0.0
      with:
        repository: AOMediaCodec/SVT-AV1
        ref: master
        path: svtav1
    - name: Build SVT AV1
      shell: cmd
      run: |
        call "${{ env.vsPath }}VC\Auxiliary\Build\vcvars64.bat"
        md build build\include build\lib build\lib\pkgconfig dist
        D:\a\_temp\setup-msys2\msys2.cmd -c 'cd svtav1/Build/windows ; ./build.bat 2019 ${{ env.winConfig }} static ; cp -r ../../Source/API ../../../build/include/svt-av1 ; cp ../../Bin/${{ env.msysConfig }}/SvtAv1Enc.lib ../../../build/lib/ ; cp SvtAv1Enc.pc ../../../build/lib/pkgconfig/ ; cd ../../../build ; tar czf ../dist/libsvtav1.tgz *'
    - name: Publish artifact
      uses: actions/upload-artifact@v2
      with:
        name: libsvtav1
        path: dist/libsvtav1.tgz
       
  libsnappy:
    if: ${{ false }}
    runs-on: windows-2019
    steps:
    - name: Set up MSYS2
      uses: msys2/setup-msys2@v2
      with:
        install: base-devel binutils autotools automake mingw-w64-x86_64-cmake nasm
        path-type: inherit
    - name: Set up cache
      uses: actions/cache@v2
      env:
        cache-name: cache-ffmpeg-${{ env.msysConfig }}
      with:
        path: cache
        key: cache-key
    - name: Set up GIT
      run: |
        git config --global core.autocrlf false
        git config --global core.eol lf
    - name: Checkout Snappy
      uses: actions/checkout@v3.0.0
      with:
        repository: google/snappy
        ref: "1.1.8"
        path: snappy
    - name: Build Snappy
      shell: cmd
      run: |
        call "${{ env.vsPath }}VC\Auxiliary\Build\vcvars64.bat"
        md build build\include build\lib build\lib\pkgconfig dist
        cd snappy
        md work
        cd work
        cmake -G "Visual Studio 16 2019" .. -DCMAKE_INSTALL_PREFIX=..\..\build -DBUILD_SHARED_LIBS=OFF -DSNAPPY_BUILD_TESTS=OFF
        MSBuild.exe /property:Configuration="${{ env.winConfig }}" Snappy.sln
        D:\a\_temp\setup-msys2\msys2.cmd -c 'cp ${{ env.winConfig }}/snappy.lib ../../build/lib/snappy.lib ; cp ../snappy.h ../snappy-c.h ../../build/include/ ; cd ../../build ; tar czf ../dist/libsnappy.tgz *'
    - name: Publish artifact
      uses: actions/upload-artifact@v2
      with:
        name: libsnappy
        path: dist/libsnappy.tgz

  libvpx:
    if: ${{ false }}
    runs-on: windows-2019
    steps:
    - name: Set up MSYS2
      uses: msys2/setup-msys2@v2
      with:
        install: base-devel binutils autotools automake mingw-w64-x86_64-cmake nasm
        path-type: inherit
    - name: Set up cache
      uses: actions/cache@v2
      env:
        cache-name: cache-ffmpeg-${{ env.msysConfig }}
      with:
        path: cache
        key: cache-key
    - name: Set up GIT
      run: |
        git config --global core.autocrlf false
        git config --global core.eol lf
    - name: Checkout LibVpx
      uses: actions/checkout@v3.0.0
      with:
        repository: webmproject/libvpx
        ref: master
        path: vpx
    - name: Build LibVpx
      shell: cmd
      run: |
        call "${{ env.vsPath }}VC\Auxiliary\Build\vcvars64.bat"
        md build build\include build\lib build\lib\pkgconfig dist
        D:\a\_temp\setup-msys2\msys2.cmd -c 'cd vpx ; ./configure --prefix=../build --target=x86_64-win64-vs16 --enable-vp9-highbitdepth --disable-shared --disable-examples --disable-tools --disable-docs --disable-libyuv --disable-unit_tests --disable-postproc ; make -j ; make install ; mv ../build/lib/x64/vpxmd.lib ../build/lib/vpx.lib ; rm -rf ../build/lib/x64 ; cd ../build ; tar czf ../dist/libvpx.tgz *'
    - name: Publish artifact
      uses: actions/upload-artifact@v2
      with:
        name: libvpx
        path: dist/libvpx.tgz

  libmp3lame:
    if: ${{ false }}
    runs-on: windows-2019
    steps:
    - name: Set up MSYS2
      uses: msys2/setup-msys2@v2
      with:
        install: base-devel binutils autotools automake mingw-w64-x86_64-cmake nasm svn
        path-type: inherit
    - name: Set up cache
      uses: actions/cache@v2
      env:
        cache-name: cache-ffmpeg-${{ env.msysConfig }}
      with:
        path: cache
        key: cache-key
    - name: Build LAME
      shell: cmd
      run: |
        call "${{ env.vsPath }}VC\Auxiliary\Build\vcvars64.bat"
        md build dist
        D:\a\_temp\setup-msys2\msys2.cmd -c 'svn co svn://svn.code.sf.net/p/lame/svn/trunk/lame@6474 lame ; cd lame ; autoreconf -i ; CC=cl.exe CXX=cl.exe CXXFLAGS=${{ env.cFlags }} ./configure --prefix=$(realpath ../build) --enable-nasm --disable-frontend --disable-shared --enable-static ; make -j ; make install ; cd ../build ; tar czf ../dist/libmp3lame.tgz *
    - name: Publish artifact
      uses: actions/upload-artifact@v2
      with:
        name: libmp3lame
        path: dist/libmp3lame.tgz

  libzimg:
    if: ${{ false }}
    runs-on: windows-2019
    steps:
    - name: Set up MSYS2
      uses: msys2/setup-msys2@v2
      with:
        install: base-devel binutils autotools automake mingw-w64-x86_64-cmake nasm
        path-type: inherit
    - name: Set up cache
      uses: actions/cache@v2
      env:
        cache-name: cache-ffmpeg-${{ env.msysConfig }}
      with:
        path: cache
        key: cache-key
    - name: Set up GIT
      run: |
        git config --global core.autocrlf false
        git config --global core.eol lf
    - name: Checkout ZIMG
      uses: actions/checkout@v3.0.0
      with:
        repository: sekrit-twc/zimg
        ref: release-2.9.2
        path: zimg
    - name: Build ZIMG
      shell: cmd
      run: |
        call "${{ env.vsPath }}VC\Auxiliary\Build\vcvars64.bat"
        md build build\include build\lib build\lib\pkgconfig dist
        D:\a\_temp\setup-msys2\msys2.cmd -c 'cd zimg ; ./autogen.sh ; ./configure --prefix=$(realpath ../build) ; cd _msvc/zimg ; MSBuild.exe /property:Configuration="${{ env.winConfig }}" /property:ConfigurationType=StaticLibrary /property:WindowsTargetPlatformVersion=10.0.17134.0 /property:PlatformToolset=v142 /property:Platform=x64 /property:WholeProgramOptimization=false zimg.vcxproj ; cp x64/${{ env.winConfig }}/z.lib ../../../build/lib/zimg.lib ; cd ../.. ; cp src/zimg/api/zimg.h  ../build/include/zimg.h ; cp zimg.pc ../build/lib/pkgconfig/zimg.pc ; cd ../build ; tar czf ../dist/libzimg.tgz *'
    - name: Publish artifact
      uses: actions/upload-artifact@v2
      with:
        name: libzimg
        path: dist/libzimg.tgz

  libopus:
    if: ${{ false }}
    runs-on: windows-2019
    steps:
    - name: Set up MSYS2
      uses: msys2/setup-msys2@v2
      with:
        install: base-devel binutils autotools automake mingw-w64-x86_64-cmake nasm
        path-type: inherit
    - name: Set up cache
      uses: actions/cache@v2
      env:
        cache-name: cache-ffmpeg-${{ env.msysConfig }}
      with:
        path: cache
        key: cache-key
    - name: Set up GIT
      run: |
        git config --global core.autocrlf false
        git config --global core.eol lf
    - name: Checkout OPUS
      uses: actions/checkout@v3.0.0
      with:
        repository: xiph/opus
        ref: master
        path: opus
    - name: Build OPUS
      shell: cmd
      run: |
        call "${{ env.vsPath }}VC\Auxiliary\Build\vcvars64.bat"
        md build build\include build\lib build\lib\pkgconfig dist
        cd opus\win32\VS2015
        MSBuild.exe /property:Configuration="${{ env.winConfig }}" /property:Platform=x64 /property:PlatformToolset=v142 opus.vcxproj
        D:\a\_temp\setup-msys2\msys2.cmd -c 'cp x64/${{ env.winConfig }}/opus.lib ../../../build/lib/opus.lib ; cd ../../.. ; cp -r opus/include build/include/opus ; cp opus/opus.pc.in build/lib/pkgconfig/opus.pc ; sed -i "s#@prefix@#$BUILD#g" build/lib/pkgconfig/opus.pc ; sed -i "s/@exec_prefix@/\$\{prefix\}/g" build/lib/pkgconfig/opus.pc ; sed -i "s/@libdir@/\$\{prefix\}\/lib/g" build/lib/pkgconfig/opus.pc ; sed -i "s/@includedir@/\$\{prefix\}\/include/g" build/lib/pkgconfig/opus.pc ; sed -i "s/@LIBM@//g" build/lib/pkgconfig/opus.pc; sed -i "s/@VERSION@/2.0.0/g" build/lib/pkgconfig/opus.pc ; cd build ; tar czf ../dist/libopus.tgz *'
    - name: Publish artifact
      uses: actions/upload-artifact@v2
      with:
        name: libopus
        path: dist/libopus.tgz

  libx264:
    if: ${{ false }}
    runs-on: windows-2019
    steps:
    - name: Set up MSYS2
      uses: msys2/setup-msys2@v2
      with:
        install: base-devel binutils autotools automake mingw-w64-x86_64-cmake nasm
        path-type: inherit
    - name: Set up cache
      uses: actions/cache@v2
      env:
        cache-name: cache-ffmpeg-${{ env.msysConfig }}
      with:
        path: cache
        key: cache-key
    - name: Set up GIT
      run: |
        git config --global core.autocrlf false
        git config --global core.eol lf
    - name: Checkout X264
      uses: actions/checkout@v3.0.0
      with:
        repository: mirror/x264
        ref: master
        path: x264
    - name: Build X264
      shell: cmd
      run: |
        call "${{ env.vsPath }}VC\Auxiliary\Build\vcvars64.bat"
        md build build\include build\lib build\lib\pkgconfig dist
        D:\a\_temp\setup-msys2\msys2.cmd -c 'cd x264 ; CC=cl ./configure --prefix=$(realpath ../build) --disable-cli --enable-static --enable-pic --libdir=../build/lib ; make -j ; make install-lib-static ; cd ../build ; tar czf ../dist/libx264.tgz *'
    - name: Publish artifact
      uses: actions/upload-artifact@v2
      with:
        name: libx264
        path: dist/libx264.tgz
        
  libfdkaac:
    if: ${{ false }}
    runs-on: windows-2019
    steps:
    - name: Set up MSYS2
      uses: msys2/setup-msys2@v2
      with:
        install: base-devel binutils autotools automake mingw-w64-x86_64-cmake nasm
        path-type: inherit
    - name: Set up cache
      uses: actions/cache@v2
      env:
        cache-name: cache-ffmpeg-${{ env.msysConfig }}
      with:
        path: cache
        key: cache-key
    - name: Set up GIT
      run: |
        git config --global core.autocrlf false
        git config --global core.eol lf
    - name: Checkout FDK AAC
      uses: actions/checkout@v3.0.0
      with:
        repository: mstorsjo/fdk-aac
        ref: master
        path: fdkaac
    - name: Build FDK AAC
      shell: cmd
      run: |
        call "${{ env.vsPath }}VC\Auxiliary\Build\vcvars64.bat"
        md build dist
        D:\a\_temp\setup-msys2\msys2.cmd -c 'cd fdkaac ; autoreconf -fiv ; CC=cl.exe CXX=cl.exe CXXFLAGS=-MDd ./configure --prefix=$(realpath ../build) --disable-shared --disable-static ; make ; make install ; cd ../build ; tar czf ../dist/libfdkaac.tgz *'
    - name: Publish artifact
      uses: actions/upload-artifact@v2
      with:
        name: libfdkaac
        path: dist/libfdkaac.tgz

  ffmpeg:
    runs-on: windows-2019
    #needs: [libvpl,libsvtav1,libsnappy,libvpx,libmp3lame,libzimg,libopus,liboggvorbis,libx264,libfdkaac]
    steps:
    - name: Set up MSYS2
      uses: msys2/setup-msys2@v2
      with:
        install: base-devel binutils mingw-w64-x86_64-cmake nasm
        path-type: inherit
    - name: Set up GIT
      run: |
        git config --global core.autocrlf false
        git config --global core.eol lf
    - name: Checkout patches
      uses: actions/checkout@v3.0.0
    - name: Checkout FFmpeg
      uses: actions/checkout@v3.0.0
      with:
        repository: FFmpeg/FFmpeg.git
        ref: release/5.0
        path: ffmpeg
    #- name: Checkout NvEnc
    #  uses: actions/checkout@v3.0.0
    #  with:
    #    repository: FFmpeg/nv-codec-headers
    #    ref: sdk/9.1
    #    path: nvenc
    #- name: Checkout AMF
    #  uses: actions/checkout@v3.0.0
    #  with:
    #    repository: GPUOpen-LibrariesAndSDKs/AMF
    #    ref: master
    #    path: amf
    - name: Set up artifacts
      uses: actions/download-artifact@v3
      with:
        path: build_artifacts
    - name: Build FFmpeg
      shell: cmd
      run: |
        call "${{ env.vsPath }}VC\Auxiliary\Build\vcvars64.bat"
        D:\a\_temp\setup-msys2\msys2.cmd -c 'cd ffmpeg ; git apply --ignore-whitespace --verbose ../patches/0003-dynamic-loading-of-shared-fdk-aac-library-5.0.patch ; pwd ; dir'
        cd
        dir
        md build dist
        D:\a\_temp\setup-msys2\msys2.cmd -c 'cd build ; for file in `ls ../build_artifacts/**/*.tgz`; do tar -xzf $file; done ; rm bin/*.dll ; cd ../nvenc ; make PREFIX=../build install ; cp -a ../amf/amf/public/include ../build/include/AMF ; cd ../ffmpeg ; PKG_CONFIG_PATH=../build/lib/pkgconfig ./configure --toolchain=msvc --extra-cflags="${{ env.cFlags }} -I../build/include" --extra-ldflags="-LIBPATH:../build/lib" --prefix=../build --pkg-config-flags="--static" --disable-doc --disable-shared --enable-static --enable-runtime-cpudetect --disable-devices --disable-demuxers --disable-decoders --disable-network --enable-w32threads --enable-gpl ${{ env.switches }} ; make ; make install ; cd ../build/lib ; for file in *.a; do mv "$file" "`basename "$file" .a`.lib" ; done ; ls -laR .. ; rm -rf fdk-aac.lib cmake pkgconfig *.la ../share ; ls -laR .. ;  cd .. ; tar czf ../dist/ffmpeg-win64-static-${{ env.msysConfig }}.tar.gz *'
    - name: Publish FFmpeg artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.winConfig }} package build
        path: dist/ffmpeg-win64-static-${{ env.msysConfig }}.tar.gz
