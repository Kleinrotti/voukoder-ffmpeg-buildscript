name: FFmpeg

on:
  workflow_dispatch:
    inputs:
      config:
        description: 'Configuration'     
        required: true
        default: 'Debug'
        
env:
  vsPath: C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\
  msysConfig: debug
  winConfig: Debug
  cFlags: -MDd
  switches: ""

jobs:
  liboggvorbis:
    if: ${{ false }}
    runs-on: windows-2019
    steps:
    - name: Set up MSYS2
      uses: msys2/setup-msys2@v2
      with:
        install: base-devel binutils autotools automake
        path-type: inherit
    - name: Set up cache
      uses: actions/cache@v2
      env:
        cache-name: cache-ffmpeg-${{ env.msysConfig }}
      with:
        path: cache
        key: cache-key
    - name: Set up GIT
      run: |
        git config --global core.autocrlf false
        git config --global core.eol lf
    - name: Checkout Ogg
      uses: actions/checkout@v3.0.0
      with:
        repository: xiph/ogg
        ref: master
        path: ogg
    - name: Checkout Vorbis
      uses: actions/checkout@v3.0.0
      with:
        repository: xiph/vorbis
        ref: master
        path: vorbis
    - name: Build Ogg
      shell: cmd
      run: |
        call "${{ env.vsPath }}VC\Auxiliary\Build\vcvars64.bat"
        md build
        D:\a\_temp\setup-msys2\msys2.cmd -c 'cd ogg ; autoreconf -i ; CC=cl.exe CXX=cl.exe CXXFLAGS=${{ env.cFlags }} ./configure --prefix=$(realpath ../build) --disable-shared ; make -j ; make install'
    - name: Build Vorbis
      shell: cmd
      run: |
        call "${{ env.vsPath }}VC\Auxiliary\Build\vcvars64.bat"
        md dist
        D:\a\_temp\setup-msys2\msys2.cmd -c 'cd vorbis ; autoreconf -i ; CC=cl.exe CXX=cl.exe CXXFLAGS=${{ env.cFlags }} ./configure --prefix=$(realpath ../build) --disable-shared ; make -j ; make install ; sed -i '/^Libs\.private.*/d' ../build/lib/pkgconfig/vorbis.pc ; cd ../build ; tar czf ../dist/liboggvorbis.tgz *'
        echo "switches=${{env.switches}} --enable-encoder=libopus --enable-encoder=libvorbis" >> $GITHUB_ENV
    - name: Publish artifact
      uses: actions/upload-artifact@v2
      with:
        name: liboggvorbis
        path: dist/liboggvorbis.tgz
        
  onevpl:
    runs-on: windows-2019
    steps:
      - name: Set up MSYS2
        uses: msys2/setup-msys2@v2
        with:
          install: base-devel binutils autotools automake
          path-type: inherit
      - name: Set up cache
        uses: actions/cache@v2
        env:
          cache-name: cache-ffmpeg-${{ env.msysConfig }}
        with:
          path: cache
          key: cache-key
      - name: Set up GIT
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf
      - name: Checkout oneVPL
        uses: actions/checkout@v3.0.0
        with:
          repository: oneapi-src/oneVPL
          ref: master
          path: onevpl
      - name: Build oneVPL
        shell: cmd
        run: |
          call "${{ env.vsPath }}VC\Auxiliary\Build\vcvars64.bat"
          md build dist
          cd build
          cmake.exe -G "Visual Studio 16 2019" ..\repos\oneVPL -T host=x64 -A x64 -DBUILD_TOOLS=OFF -DBUILD_EXAMPLES=OFF -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX=..\build -DCMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD=ON
          MSBuild.exe -t:VPL,INSTALL -p:Configuration=${{ env.winConfig }} -m oneVPL.sln
          D:\a\_temp\setup-msys2\msys2.cmd -c 'cd build ; tar czf ../dist/onevpl.tgz *'
      - name: Publish artifact
        uses: actions/upload-artifact@v2
        with:
          name: onevpl
          path: dist/onevpl.tgz
        
  libsvtav1:
    if: ${{ false }}
    runs-on: windows-2019
    steps:
    - name: Set up MSYS2
      run: echo "bla"
       
  libsnappy:
    if: ${{ false }}
    runs-on: windows-2019
    steps:
    - name: Set up MSYS2
      run: echo "bla"

  libvpx:
    if: ${{ false }}
    runs-on: windows-2019
    steps:
    - name: Set up MSYS2
      run: echo "bla"

  libfdk-aac:
    if: ${{ false }}
    runs-on: windows-2019
    steps:
    - name: Set up MSYS2
      run: echo "bla"

  libmp3lame:
    if: ${{ false }}
    runs-on: windows-2019
    steps:
    - name: Set up MSYS2
      run: echo "bla"

  libzimg:
    if: ${{ false }}
    runs-on: windows-2019
    steps:
    - name: Set up MSYS2
      run: echo "bla"

  libopus:
    if: ${{ false }}
    runs-on: windows-2019
    steps:
    - name: Set up MSYS2
      run: echo "bla"

  libx264:
    if: ${{ false }}
    runs-on: windows-2019
    steps:
    - name: Set up MSYS2
      run: echo "bla"

  libx265:
    if: ${{ false }}
    runs-on: windows-2019
    steps:
    - name: Set up MSYS2
      run: echo "bla"

  ffmpeg:
    if: ${{ false }}
    runs-on: windows-2019
    needs: [onevpl,libsvtav1,libsnappy,libvpx,libfdk-aac,libmp3lame,libzimg,libopus,liboggvorbis,libx264,libx265]
    steps:
    - name: Set up MSYS2
      uses: msys2/setup-msys2@v2
      with:
        install: base-devel binutils mingw-w64-x86_64-cmake nasm
        path-type: inherit
    - name: Set up GIT
      run: |
        git config --global core.autocrlf false
        git config --global core.eol lf
    - name: Checkout FFmpeg
      uses: actions/checkout@v3.0.0
      with:
        repository: FFmpeg/FFmpeg.git
        ref: release/5.0
        path: ffmpeg
    - name: Checkout NvEnc
      uses: actions/checkout@v3.0.0
      with:
        repository: FFmpeg/nv-codec-headers
        ref: sdk/9.1
        path: nvenc
    - name: Checkout AMF
      uses: actions/checkout@v3.0.0
      with:
        repository: GPUOpen-LibrariesAndSDKs/AMF
        ref: master
        path: amf
    - name: Build FFmpeg
      shell: cmd
      run: |
        call "${{ env.vsPath }}VC\Auxiliary\Build\vcvars64.bat"
        md build dist
        D:\a\_temp\setup-msys2\msys2.cmd -c 'cd nvenc ; make PREFIX=../build install ; cp -a ../amf/amf/public/include ../build/include/AMF ; cd ../ffmpeg ; PKG_CONFIG_PATH=../build/lib/pkgconfig ./configure --toolchain=msvc --extra-cflags="${{ env.cFlags }} -I../build/include" --extra-ldflags="-LIBPATH:../build/lib" --prefix=../build --pkg-config-flags="--static" --disable-doc --disable-shared --enable-static --enable-runtime-cpudetect --disable-devices --disable-demuxers --disable-decoders --disable-network --enable-w32threads --enable-gpl ; make ; make install ; cd ../build/lib ; for file in *.a; do mv "$file" "`basename "$file" .a`.lib"; done ; rm -rf fdk-aac.lib pkgconfig *.la ../share ; cd .. ; tar czf ../dist/ffmpeg-win64-static-${{ env.msysConfig }}.tar.gz *'
    - name: Publish FFmpeg artifacts
      uses: actions/upload-artifact@v3
      with:
        name: Nightly Build (${{ env.winConfig }})
        path: dist/ffmpeg-win64-static-${{ env.msysConfig }}.tar.gz
