name: 'Build FFmpeg'

on:
  workflow_dispatch:
    inputs:
      env:
        type: choice
        required: true
        default: 'windows-2022' 
        description: 'Environment'
        options: 
        - windows-2022

      source:
        type: choice
        required: true
        default: 'ffmpeg' 
        description: Source
        options: 
        - ffmpeg
        - cartwheel
      
      type:
        type: choice
        required: true
        default: 'static' 
        description: Type
        options: 
        - static
        - shared

      config:
        type: choice
        required: true
        default: 'debug' 
        description: 'Configuration'
        options: 
        - debug
        - release
        
      ffmpegRef:
        type: string
        required: true
        default: 'release/5.0' 
        description: 'FFmpeg refId'

      nvencRef:
        type: string
        required: true
        default: 'sdk/9.1' 
        description: 'NVENC refId'

      amfRef:
        type: string
        required: true
        default: 'master' 
        description: 'AMF refId'
        
  workflow_call:
    inputs:
      env:
        type: string
        required: true
        default: 'windows-2022' 
        description: 'Environment'
        
      source:
        type: string
        required: true
        default: 'ffmpeg' 
        description: Source
      
      type:
        type: string
        required: true
        default: 'static' 
        description: Type

      config:
        type: string
        required: true
        default: 'debug' 
        description: 'Configuration'
        
      ffmpegRef:
        type: string
        required: true
        default: 'release/5.0' 
        description: 'FFmpeg refId'

      nvencRef:
        type: string
        required: true
        default: 'sdk/9.1' 
        description: 'NVENC refId'

      amfRef:
        type: string
        required: true
        default: 'master' 
        description: 'AMF refId'
        
env:
  vsPath: C:\Program Files\Microsoft Visual Studio\2022\Enterprise\
  COMPONENTS: "--enable-libsvtav1 --enable-libsnappy --enable-libmp3lame --enable-libzimg --enable-libopus --enable-libvorbis --enable-libx264 --enable-libx265 --enable-libfdk-aac --enable-libvpx "
  NASM_EXECUTABLE: nasm
  cFlags: ${{ inputs.config == 'release' && '-MD' || '-MDd' }}
  variant: ${{ inputs.type == 'static' && ' --pkg-config-flags="--static" --disable-shared --enable-static' || ' --disable-static --enable-shared' }}
  msbuildConfig: ${{ inputs.config == 'release' && 'Release' || 'Debug' }}
  
jobs:
  libvpl:
    runs-on: ${{ inputs.env }}
    if: ${{ inputs.source == 'cartwheel' }}
    steps:
    - name: Set up GIT
      run: |
        git config --global core.autocrlf false
        git config --global core.eol lf
    - name: Checkout oneVPL
      uses: actions/checkout@v3.0.0
      with:
        repository: oneapi-src/oneVPL
        ref: master
        path: onevpl
    - name: Check cache
      id: libvpl-cache
      uses: actions/cache@v3
      with:
        path: dist
        key: libvpl-${{ inputs.env }}-${{ inputs.config }}-${{ hashFiles('onevpl') }}
    - name: Set up MSYS2
      if: steps.libvpl-cache.outputs.cache-hit != 'true'
      uses: msys2/setup-msys2@v2
      with:
        install: base-devel binutils autotools automake
        path-type: inherit
    - name: Build oneVPL
      if: steps.libvpl-cache.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        call "${{ env.vsPath }}VC\Auxiliary\Build\vcvars64.bat"
        md temp build dist
        cd temp
        cmake.exe -G "Visual Studio 17 2022" ..\onevpl -T host=x64 -A x64 -DBUILD_TOOLS=OFF -DBUILD_EXAMPLES=OFF -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX=..\build -DCMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD=ON
        MSBuild.exe -t:VPL,INSTALL -p:Configuration=${{ env.msbuildConfig }} -m vpl.sln
        cd ..\build
        IF EXIST "lib\vpld.lib" move "lib\vpld.lib" "lib\vpl.lib"
        D:\a\_temp\setup-msys2\msys2.cmd -c 'rm -rf bin/cmake ; tar czf ../dist/libvpl.tgz *'
    - name: Publish artifact
      uses: actions/upload-artifact@v2
      with:
        name: libvpl
        path: dist/libvpl.tgz

  liboggvorbis:
    runs-on: ${{ inputs.env }}
    steps:
    - name: Set up GIT
      run: |
        git config --global core.autocrlf false
        git config --global core.eol lf
    - name: Checkout Ogg
      uses: actions/checkout@v3.0.0
      with:
        repository: xiph/ogg
        ref: master
        path: ogg
    - name: Checkout Vorbis
      uses: actions/checkout@v3.0.0
      with:
        repository: xiph/vorbis
        ref: master
        path: vorbis
    - name: Check cache
      id: liboggvorbis-cache
      uses: actions/cache@v3
      with:
        path: dist
        key: liboggvorbis-${{ inputs.env }}-${{ inputs.config }}-${{ hashFiles('ogg') }}-${{ hashFiles('vorbis') }}
    - name: Set up MSYS2
      if: steps.liboggvorbis-cache.outputs.cache-hit != 'true'
      uses: msys2/setup-msys2@v2
      with:
        install: base-devel binutils autotools automake
        path-type: inherit
    - name: Build Ogg
      if: steps.liboggvorbis-cache.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        call "${{ env.vsPath }}VC\Auxiliary\Build\vcvars64.bat"
        md build
        D:\a\_temp\setup-msys2\msys2.cmd -c 'cd ogg ; autoreconf -i ; CC=cl.exe CXX=cl.exe CXXFLAGS=${{ env.cFlags }} ./configure --prefix=$(realpath ../build) --disable-shared ; make -j ; make install'
    - name: Build Vorbis
      if: steps.liboggvorbis-cache.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        call "${{ env.vsPath }}VC\Auxiliary\Build\vcvars64.bat"
        md dist
        D:\a\_temp\setup-msys2\msys2.cmd -c 'cd vorbis ; autoreconf -i ; CC=cl.exe CXX=cl.exe CXXFLAGS=${{ env.cFlags }} ./configure --prefix=$(realpath ../build) --disable-shared ; make -j ; make install ; sed -i '/^Libs\.private.*/d' ../build/lib/pkgconfig/vorbis.pc ; cd ../build ; tar czf ../dist/liboggvorbis.tgz *'
    - name: Publish artifact
      uses: actions/upload-artifact@v2
      with:
        name: liboggvorbis
        path: dist/liboggvorbis.tgz
        
  libsvtav1:
    runs-on: ${{ inputs.env }}
    steps:
    - name: Set up GIT
      run: |
        git config --global core.autocrlf false
        git config --global core.eol lf
    - name: Checkout SVT AV1
      uses: actions/checkout@v3.0.0
      with:
        repository: AOMediaCodec/SVT-AV1
        ref: master
        path: svtav1
    - name: Check cache
      id: libsvtav1-cache
      uses: actions/cache@v3
      with:
        path: dist
        key: libsvtav1-${{ inputs.env }}-${{ inputs.config }}-${{ hashFiles('svtav1') }}
    - name: Set up MSYS2
      if: steps.libsvtav1-cache.outputs.cache-hit != 'true'
      uses: msys2/setup-msys2@v2
      with:
        install: base-devel binutils autotools automake mingw-w64-x86_64-cmake nasm
        path-type: inherit
    - name: Build SVT AV1
      if: steps.libsvtav1-cache.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        call "${{ env.vsPath }}VC\Auxiliary\Build\vcvars64.bat"
        md build build\include build\lib build\lib\pkgconfig dist
        D:\a\_temp\setup-msys2\msys2.cmd -c 'cd svtav1/Build/windows ; ./build.bat 2022 ${{ inputs.config }} static ; cp -r ../../Source/API ../../../build/include/svt-av1 ; cp ../../Bin/${{ inputs.config }}/SvtAv1Enc.lib ../../../build/lib/ ; cp SvtAv1Enc.pc ../../../build/lib/pkgconfig/ ; cd ../../../build ; tar czf ../dist/libsvtav1.tgz *'
    - name: Publish artifact
      uses: actions/upload-artifact@v2
      with:
        name: libsvtav1
        path: dist/libsvtav1.tgz
       
  libsnappy:
    runs-on: ${{ inputs.env }}
    steps:
    - name: Set up GIT
      run: |
        git config --global core.autocrlf false
        git config --global core.eol lf
    - name: Checkout Snappy
      uses: actions/checkout@v3.0.0
      with:
        repository: google/snappy
        ref: "1.1.8"
        path: snappy
    - name: Check cache
      id: libsnappy-cache
      uses: actions/cache@v3
      with:
        path: dist
        key: libsnappy-${{ inputs.env }}-${{ inputs.config }}-${{ hashFiles('snappy') }}
    - name: Set up MSYS2
      if: steps.libsnappy-cache.outputs.cache-hit != 'true'
      uses: msys2/setup-msys2@v2
      with:
        install: base-devel binutils autotools automake mingw-w64-x86_64-cmake nasm
        path-type: inherit
    - name: Build Snappy
      shell: cmd
      run: |
        call "${{ env.vsPath }}VC\Auxiliary\Build\vcvars64.bat"
        md build build\include build\lib build\lib\pkgconfig dist
        cd snappy
        md work
        cd work
        cmake -G "Visual Studio 17 2022" .. -DCMAKE_INSTALL_PREFIX=..\..\build -DBUILD_SHARED_LIBS=OFF -DSNAPPY_BUILD_TESTS=OFF
        MSBuild.exe /property:Configuration="${{ env.msbuildConfig }}" Snappy.sln
        D:\a\_temp\setup-msys2\msys2.cmd -c 'cp ${{ inputs.config }}/snappy.lib ../../build/lib/snappy.lib ; cp ../snappy.h ../snappy-c.h ../../build/include/ ; cd ../../build ; tar czf ../dist/libsnappy.tgz *'
    - name: Publish artifact
      uses: actions/upload-artifact@v2
      with:
        name: libsnappy
        path: dist/libsnappy.tgz

  libvpx:
    runs-on: ${{ inputs.env }}
    steps:
    - name: Set up GIT
      run: |
        git config --global core.autocrlf false
        git config --global core.eol lf
        git clone https://github.com/webmproject/libvpx.git vpx
    - name: Check cache
      id: libvpx-cache
      uses: actions/cache@v3
      with:
        path: dist
        key: libvpx-${{ inputs.env }}-${{ inputs.config }}-${{ hashFiles('vpx') }}
    - name: Set up MSYS2
      if: steps.libvpx-cache.outputs.cache-hit != 'true'
      uses: msys2/setup-msys2@v2
      with:
        install: base-devel binutils autotools automake mingw-w64-x86_64-cmake nasm
        path-type: inherit
    - name: Build LibVpx
      if: steps.libvpx-cache.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        call "${{ env.vsPath }}VC\Auxiliary\Build\vcvars64.bat"
        md build build\include build\lib build\lib\pkgconfig dist
        D:\a\_temp\setup-msys2\msys2.cmd -c 'cd vpx ; ./configure --prefix=../build --target=x86_64-win64-vs17 --enable-vp9-highbitdepth --disable-shared --disable-examples --disable-tools --disable-docs --disable-libyuv --disable-unit_tests --disable-postproc ; make -j ; make install ; mv ../build/lib/x64/vpxmd.lib ../build/lib/vpx.lib ; rm -rf ../build/lib/x64 ; cd ../build ; tar czf ../dist/libvpx.tgz *'
    - name: Publish artifact
      uses: actions/upload-artifact@v2
      with:
        name: libvpx
        path: dist/libvpx.tgz

  libmp3lame:
    runs-on: ${{ inputs.env }}
    steps:
    - name: Set up MSYS2
      uses: msys2/setup-msys2@v2
      with:
        install: base-devel binutils autotools automake mingw-w64-x86_64-cmake nasm svn
        path-type: inherit
    - name: Build LAME
      shell: cmd
      run: |
        call "${{ env.vsPath }}VC\Auxiliary\Build\vcvars64.bat"
        md build dist
        D:\a\_temp\setup-msys2\msys2.cmd -c 'svn co https://svn.code.sf.net/p/lame/svn/trunk/lame@6474 lame ; cd lame ; autoreconf -i ; CC=cl.exe CXX=cl.exe CXXFLAGS=${{ env.cFlags }} ./configure --prefix=$(realpath ../build) --enable-nasm --disable-frontend --disable-shared --enable-static ; make -j ; make install ; cd ../build ; tar czf ../dist/libmp3lame.tgz *
    - name: Publish artifact
      uses: actions/upload-artifact@v2
      with:
        name: libmp3lame
        path: dist/libmp3lame.tgz

  libzimg:
    runs-on: ${{ inputs.env }}
    steps:
    - name: Set up GIT
      run: |
        git config --global core.autocrlf false
        git config --global core.eol lf
    - name: Checkout ZIMG
      uses: actions/checkout@v3.0.0
      with:
        repository: sekrit-twc/zimg
        ref: release-2.9.2
        path: zimg
    - name: Check cache
      id: libzimg-cache
      uses: actions/cache@v3
      with:
        path: dist
        key: libzimg-${{ inputs.env }}-${{ inputs.config }}-${{ hashFiles('zimg') }}
    - name: Set up MSYS2
      if: steps.libzimg-cache.outputs.cache-hit != 'true'
      uses: msys2/setup-msys2@v2
      with:
        install: base-devel binutils autotools automake mingw-w64-x86_64-cmake nasm
        path-type: inherit
    - name: Build ZIMG
      if: steps.libzimg-cache.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        call "${{ env.vsPath }}VC\Auxiliary\Build\vcvars64.bat"
        md build build\include build\lib build\lib\pkgconfig dist
        D:\a\_temp\setup-msys2\msys2.cmd -c 'cd zimg ; ./autogen.sh ; ./configure --prefix=$(realpath ../build) ; cd _msvc/zimg ; MSBuild.exe /property:Configuration="${{ env.msbuildConfig }}" /property:ConfigurationType=StaticLibrary /property:PlatformToolset=v143 /property:Platform=x64 /property:WholeProgramOptimization=false zimg.vcxproj ; cp x64/${{ inputs.config }}/z.lib ../../../build/lib/zimg.lib ; cd ../.. ; cp src/zimg/api/zimg.h  ../build/include/zimg.h ; cp zimg.pc ../build/lib/pkgconfig/zimg.pc ; cd ../build ; tar czf ../dist/libzimg.tgz *'
    - name: Publish artifact
      uses: actions/upload-artifact@v2
      with:
        name: libzimg
        path: dist/libzimg.tgz

  libopus:
    runs-on: ${{ inputs.env }}
    steps:
    - name: Set up GIT
      run: |
        git config --global core.autocrlf false
        git config --global core.eol lf
    - name: Checkout OPUS
      uses: actions/checkout@v3.0.0
      with:
        repository: xiph/opus
        ref: master
        path: opus        
    - name: Check cache
      id: libopus-cache
      uses: actions/cache@v3
      with:
        path: dist
        key: libopus-${{ inputs.env }}-${{ inputs.config }}-${{ hashFiles('opus') }}
    - name: Set up MSYS2
      if: steps.libopus-cache.outputs.cache-hit != 'true'
      uses: msys2/setup-msys2@v2
      with:
        install: base-devel binutils autotools automake mingw-w64-x86_64-cmake nasm
        path-type: inherit
    - name: Build OPUS
      if: steps.libopus-cache.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        call "${{ env.vsPath }}VC\Auxiliary\Build\vcvars64.bat"
        md build build\include build\lib build\lib\pkgconfig dist
        cd opus\win32\VS2015
        MSBuild.exe /property:Configuration="${{ env.msbuildConfig }}" /property:Platform=x64 /property:PlatformToolset=v143 opus.vcxproj
        D:\a\_temp\setup-msys2\msys2.cmd -c 'cp x64/${{ inputs.config }}/opus.lib ../../../build/lib/opus.lib ; cd ../../.. ; cp -r opus/include build/include/opus ; cp opus/opus.pc.in build/lib/pkgconfig/opus.pc ; sed -i "s#@prefix@#$(realpath ../../../build)#g" build/lib/pkgconfig/opus.pc ; sed -i "s/@exec_prefix@/\$\{prefix\}/g" build/lib/pkgconfig/opus.pc ; sed -i "s/@libdir@/\$\{prefix\}\/lib/g" build/lib/pkgconfig/opus.pc ; sed -i "s/@includedir@/\$\{prefix\}\/include/g" build/lib/pkgconfig/opus.pc ; sed -i "s/@LIBM@//g" build/lib/pkgconfig/opus.pc; sed -i "s/@VERSION@/2.0.0/g" build/lib/pkgconfig/opus.pc ; cd build ; tar czf ../dist/libopus.tgz *'
    - name: Publish artifact
      uses: actions/upload-artifact@v2
      with:
        name: libopus
        path: dist/libopus.tgz

  libx264:
    runs-on: ${{ inputs.env }}
    steps:
    - name: Set up GIT
      run: |
        git config --global core.autocrlf false
        git config --global core.eol lf
    - name: Checkout X264
      uses: actions/checkout@v3.0.0
      with:
        repository: mirror/x264
        ref: master
        path: x264
    - name: Check cache
      id: libx264-cache
      uses: actions/cache@v3
      with:
        path: dist
        key: libx264-${{ inputs.env }}-${{ inputs.config }}-${{ hashFiles('x264') }}
    - name: Set up MSYS2
      if: steps.libx264-cache.outputs.cache-hit != 'true'
      uses: msys2/setup-msys2@v2
      with:
        install: base-devel binutils autotools automake mingw-w64-x86_64-cmake nasm
        path-type: inherit
    - name: Build X264
      if: steps.libx264-cache.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        call "${{ env.vsPath }}VC\Auxiliary\Build\vcvars64.bat"
        md build build\include build\lib build\lib\pkgconfig dist
        D:\a\_temp\setup-msys2\msys2.cmd -c 'cd x264 ; CC=cl ./configure --prefix=$(realpath ../build) --disable-cli --enable-static --enable-pic --libdir=../build/lib ; make -j ; make install-lib-static ; cd ../build ; tar czf ../dist/libx264.tgz *'
    - name: Publish artifact
      uses: actions/upload-artifact@v2
      with:
        name: libx264
        path: dist/libx264.tgz
        
  libfdkaac:
    runs-on: ${{ inputs.env }}
    steps:
    - name: Set up GIT
      run: |
        git config --global core.autocrlf false
        git config --global core.eol lf
    - name: Checkout FDK AAC
      uses: actions/checkout@v3.0.0
      with:
        repository: mstorsjo/fdk-aac
        ref: master
        path: fdkaac
    - name: Check cache
      id: libfdkaac-cache
      uses: actions/cache@v3
      with:
        path: dist
        key: libfdkaac-${{ inputs.env }}-${{ inputs.config }}-${{ hashFiles('fdkaac') }}
    - name: Set up MSYS2
      if: steps.libfdkaac-cache.outputs.cache-hit != 'true'
      uses: msys2/setup-msys2@v2
      with:
        install: base-devel binutils autotools automake mingw-w64-x86_64-cmake nasm
        path-type: inherit
    - name: Build FDK AAC
      if: steps.libfdkaac-cache.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        call "${{ env.vsPath }}VC\Auxiliary\Build\vcvars64.bat"
        md build dist
        D:\a\_temp\setup-msys2\msys2.cmd -c 'cd fdkaac ; autoreconf -fiv ; CC=cl.exe CXX=cl.exe CXXFLAGS=${{ env.cFlags }} ./configure --prefix=$(realpath ../build) --disable-shared --disable-static ; make ; make install ; cd ../build ; tar czf ../dist/libfdkaac.tgz *'
    - name: Publish artifact
      uses: actions/upload-artifact@v2
      with:
        name: libfdkaac
        path: dist/libfdkaac.tgz

  libx265-12:
    runs-on: ${{ inputs.env }}
    steps:
    - name: Checkout X265
      shell: cmd
      run: |
        git config --global core.autocrlf false
        git config --global core.eol lf
        git clone -b Release_3.5 https://github.com/videolan/x265.git x265
    - name: Check cache
      id: libx26512-cache
      uses: actions/cache@v3
      with:
        path: dist
        key: libx265-12-${{ inputs.env }}-${{ inputs.config }}-${{ hashFiles('x265') }}
    - name: Set up MSBuild
      if: steps.libx26512-cache.outputs.cache-hit != 'true'
      uses: microsoft/setup-msbuild@v1.1
    - name: Set up NASM
      if: steps.libx26512-cache.outputs.cache-hit != 'true'
      uses: ilammy/setup-nasm@v1.2.1
    - name: Build X265 (12 bit)
      if: steps.libx26512-cache.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        call "${{ env.vsPath }}VC\Auxiliary\Build\vcvars64.bat"
        md build dist
        cd x265/build/vc15-x86_64
        md work
        cd work
        cmake -G "Visual Studio 17 2022" ..\..\..\source -DHIGH_BIT_DEPTH=ON -DEXPORT_C_API=OFF -DENABLE_SHARED=OFF -DENABLE_CLI=OFF -DMAIN12=ON
        MSBuild.exe /property:Configuration="${{ env.msbuildConfig }}" x265-static.vcxproj
        move ${{ inputs.config }}\x265-static.lib ..\..\..\..\dist\x265_12bit.lib
    - name: Publish artifact
      uses: actions/upload-artifact@v2
      with:
        name: x265_12bit
        path: dist/x265_12bit.lib

  libx265-10:
    runs-on: ${{ inputs.env }}
    steps:
    - name: Checkout X265
      shell: cmd
      run: |
        git config --global core.autocrlf false
        git config --global core.eol lf
        git clone -b Release_3.5 https://github.com/videolan/x265.git x265
    - name: Check cache
      id: libx26510-cache
      uses: actions/cache@v3
      with:
        path: dist
        key: libx265-10-${{ inputs.env }}-${{ inputs.config }}-${{ hashFiles('x265') }}
    - name: Set up MSBuild
      if: steps.libx26510-cache.outputs.cache-hit != 'true'
      uses: microsoft/setup-msbuild@v1.1
    - name: Set up NASM
      if: steps.libx26510-cache.outputs.cache-hit != 'true'
      uses: ilammy/setup-nasm@v1.2.1
    - name: Build X265 (10 bit)
      if: steps.libx26510-cache.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        call "${{ env.vsPath }}VC\Auxiliary\Build\vcvars64.bat"
        md build dist
        cd x265/build/vc15-x86_64
        md work
        cd work
        cmake -G "Visual Studio 17 2022" ..\..\..\source -DHIGH_BIT_DEPTH=ON -DEXPORT_C_API=OFF -DENABLE_SHARED=OFF -DENABLE_CLI=OFF
        MSBuild.exe /property:Configuration="${{ env.msbuildConfig }}" x265-static.vcxproj
        move ${{ inputs.config }}\x265-static.lib ..\..\..\..\dist\x265_10bit.lib
    - name: Publish artifact
      uses: actions/upload-artifact@v2
      with:
        name: x265_10bit
        path: dist/x265_10bit.lib

  libx265:
    runs-on: ${{ inputs.env }}
    needs: [libx265-12,libx265-10]
    steps:
    - name: Checkout X265
      shell: cmd
      run: |
        git config --global core.autocrlf false
        git config --global core.eol lf
        git clone -b Release_3.5 https://github.com/videolan/x265.git x265
    - name: Check cache
      id: libx265-cache
      uses: actions/cache@v3
      with:
        path: di
        key: libx265-${{ inputs.env }}-${{ inputs.config }}-${{ hashFiles('x265') }}
    - name: Set up MSYS2
      if: steps.libx265-cache.outputs.cache-hit != 'true'
      uses: msys2/setup-msys2@v2
      with:
        install: base-devel binutils autotools automake
        path-type: inherit
    - name: Set up MSBuild
      if: steps.libx265-cache.outputs.cache-hit != 'true'
      uses: microsoft/setup-msbuild@v1.1
    - name: Set up NASM
      if: steps.libx265-cache.outputs.cache-hit != 'true'
      uses: ilammy/setup-nasm@v1.2.1
    - name: Set up dependant libs
      if: steps.libx265-cache.outputs.cache-hit != 'true'
      uses: actions/download-artifact@v3
      with:
        path: build
    - name: Build X265
      if: steps.libx265-cache.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        call "${{ env.vsPath }}VC\Auxiliary\Build\vcvars64.bat"
        md di dist dist\include dist\lib dist\lib\pkgconfig
        cd x265/build/vc15-x86_64
        md work
        cd work
        cmake -G "Visual Studio 17 2022" ..\..\..\source -DCMAKE_INSTALL_PREFIX=..\..\..\..\build -DENABLE_SHARED=OFF -DENABLE_CLI=OFF -DEXTRA_LIB="libx265_10bit.lib;libx265_12bit.lib" -DLINKED_10BIT=ON -DLINKED_12BIT=ON
        MSBuild.exe /property:Configuration="${{ env.msbuildConfig }}" x265-static.vcxproj
        cp x265.pc ..\..\..\..\dist\lib\pkgconfig\x265.pc
        move ${{ inputs.config }}\x265-static.lib ..\..\..\..\build\
        move x265_config.h ..\..\..\..\dist\include\
        cd ..\..\..\..
        "${{ env.vsPath }}VC\Tools\MSVC\14.29.30133\bin\Hostx64\x64\lib.exe" /ignore:4006 /ignore:4221 /OUT:dist\lib\x265.lib build\x265-static.lib build\x265_10bit\x265_10bit.lib build\x265_12bit\x265_12bit.lib
        copy x265\source\x265.h dist\include\
        D:\a\_temp\setup-msys2\msys2.cmd -c 'cd dist ; tar czf ../di/libx265.tgz *'
    - name: Publish artifact
      uses: actions/upload-artifact@v2
      with:
        name: libx265
        path: di/libx265.tgz

  cartwheel:
    runs-on: ${{ inputs.env }}
    if: ${{ inputs.source == 'cartwheel' }}
    needs: [libvpl,libopus,libsvtav1,libsnappy,libmp3lame,libzimg,liboggvorbis,libx264,libx265,libfdkaac,libvpx]
    steps:
    - name: Set up MSYS2
      uses: msys2/setup-msys2@v2
      with:
        install: base-devel binutils mingw-w64-x86_64-cmake nasm
        path-type: inherit
    - name: Set up GIT
      run: |
        git config --global core.autocrlf false
        git config --global core.eol lf
        git config --global user.email "daniel.stankewitz@gmail.com"
        git config --global user.name "Daniel Stankewitz"
    - name: Checkout patches
      uses: actions/checkout@v3.0.0
    - name: Checkout NvEnc
      uses: actions/checkout@v3.0.0
      with:
        repository: FFmpeg/nv-codec-headers
        ref: ${{ inputs.nvencRef }} 
        path: nvenc
    - name: Checkout AMF
      uses: actions/checkout@v3.0.0
      with:
        repository: GPUOpen-LibrariesAndSDKs/AMF
        ref: ${{ inputs.amfRef }} 
        path: amf
    - name: Set up artifacts
      uses: actions/download-artifact@v3
      with:
        path: build_artifacts
    - name: Build FFmpeg from Cartwheel
      shell: cmd
      run: |
        call "${{ env.vsPath }}VC\Auxiliary\Build\vcvars64.bat"
        md build dist
        rem D:\a\_temp\setup-msys2\msys2.cmd -c 'git config --global user.email "daniel.stankewitz@gmail.com" ; git config --global user.name "Daniel Stankewitz" ; git clone https://github.com/intel-media-ci/cartwheel-ffmpeg --recursive cartwheel ; cd cartwheel ; git checkout b3f9843cffd4118e35bb000779444ca2f4196342 ; git submodule update --init --recursive ; cd ffmpeg ; git am ../patches/*.patch ; git apply --ignore-whitespace --verbose ../../0003-dynamic-loading-of-shared-fdk-aac-library-5.0.patch ; sed -i "s/#define X264_API_IMPORTS 1/\/\/#define X264_API_IMPORTS 1/g" libavcodec/libx264.c ; cd ../../build ; for file in `ls ../build_artifacts/**/*.tgz`; do tar -xzf $file; done ; rm -f bin/*.dll ; cd ../nvenc ; make PREFIX=../build install ; cp -a ../amf/amf/public/include ../build/include/AMF ; cd ../cartwheel/ffmpeg ; PKG_CONFIG_PATH=../../build/lib/pkgconfig ./configure --toolchain=msvc --extra-cflags="${{ env.cFlags }} -I../../build/include" --extra-ldflags="-LIBPATH:../../build/lib" --prefix=../../build --pkg-config-flags="--static" --extra-libs=Ole32.lib --extra-libs=Advapi32.lib --disable-doc --disable-shared --enable-static --enable-runtime-cpudetect --disable-devices --disable-demuxers --disable-decoders --disable-network --enable-w32threads --enable-gpl ${{ env.COMPONENTS }} ; make ; make install ; cd ../../build/lib ; for file in *.a; do mv "$file" "`basename "$file" .a`.lib" ; done ; rm -rf fdk-aac.lib cmake pkgconfig *.la ../share ; cd .. ; tar czf ../dist/ffmpeg-win64-static-${{ inputs.config }}.tar.gz *'
        rem D:\a\_temp\setup-msys2\msys2.cmd -c 'git config --global user.email "daniel.stankewitz@gmail.com" ; git config --global user.name "Daniel Stankewitz" ; git clone https://github.com/intel-media-ci/cartwheel-ffmpeg --recursive cartwheel ; cd cartwheel ; git checkout 2757a1d43ca83a3762b24a7ddd74b3291873f89c ; cd patches ; git apply --ignore-whitespace ../../hotfix.patch ; cd .. ; git submodule update --init --recursive ; cd ffmpeg ; git am ../patches/*.patch ; git apply --ignore-whitespace --verbose ../../0001-dynamic-loading-of-shared-fdk-aac-library-cw-5.0.patch ; sed -i "s/#define X264_API_IMPORTS 1/\/\/#define X264_API_IMPORTS 1/g" libavcodec/libx264.c ; cd ../../build ; for file in `ls ../build_artifacts/**/*.tgz`; do tar -xzf $file; done ; rm -f bin/*.dll ; cd ../nvenc ; make PREFIX=../build install ; cp -a ../amf/amf/public/include ../build/include/AMF ; cd ../cartwheel/ffmpeg ; PKG_CONFIG_PATH=../../build/lib/pkgconfig ./configure --toolchain=msvc --extra-cflags="${{ env.cFlags }} -I../../build/include" --extra-ldflags="-LIBPATH:../../build/lib" --prefix=../../build --pkg-config-flags="--static" --extra-libs=Ole32.lib --extra-libs=Advapi32.lib --disable-doc --disable-shared --enable-static --enable-runtime-cpudetect --enable-w32threads --enable-gpl ${{ env.COMPONENTS }} ; make ; make install ; cd ../../build/lib ; for file in *.a; do mv "$file" "`basename "$file" .a`.lib" ; done ; rm -rf fdk-aac.lib cmake pkgconfig *.la ../share ; cd .. ; tar czf ../dist/ffmpeg-win64-static-${{ inputs.config }}.tar.gz *'
        D:\a\_temp\setup-msys2\msys2.cmd -c 'git config --global user.email "daniel.stankewitz@gmail.com" ; git config --global user.name "Daniel Stankewitz" ; git clone https://github.com/intel-media-ci/cartwheel-ffmpeg --recursive cartwheel ; cd cartwheel ; cd patches ; git apply --ignore-whitespace ../../hotfix.patch ; cd .. ; git submodule update --init --recursive ; cd ffmpeg ; git am ../patches/*.patch ; git apply --ignore-whitespace --verbose ../../0001-dynamic-loading-of-shared-fdk-aac-library-cw-5.0.patch ; sed -i "s/#define X264_API_IMPORTS 1/\/\/#define X264_API_IMPORTS 1/g" libavcodec/libx264.c ; cd ../../build ; for file in `ls ../build_artifacts/**/*.tgz`; do tar -xzf $file; done ; rm -f bin/*.dll ; cd ../nvenc ; make PREFIX=../build install ; cp -a ../amf/amf/public/include ../build/include/AMF ; cd ../cartwheel/ffmpeg ; PKG_CONFIG_PATH=../../build/lib/pkgconfig ./configure --toolchain=msvc --extra-cflags="${{ env.cFlags }} -I../../build/include" --extra-ldflags="-LIBPATH:../../build/lib" --prefix=../../build --extra-libs=Ole32.lib --extra-libs=Advapi32.lib --disable-doc ${{ env.variant }} --enable-runtime-cpudetect --enable-w32threads --enable-gpl --enable-libvpl ${{ env.COMPONENTS }} ; make ; make install ; cd ../../build/lib ; for file in *.a; do mv "$file" "`basename "$file" .a`.lib" ; done ; rm -rf fdk-aac.lib cmake pkgconfig *.la ../share ; cd .. ; tar czf ../dist/ffmpeg-win64-${{ inputs.type }}-${{ inputs.config }}.tar.gz *'
    - name: Publish artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.config }} package build
        path: dist/ffmpeg-win64-${{ inputs.type }}-${{ inputs.config }}.tar.gz

  ffmpeg:
    runs-on: ${{ inputs.env }}
    if: ${{ inputs.source == 'ffmpeg' }}  
    needs: [libopus,libsvtav1,libsnappy,libmp3lame,libzimg,liboggvorbis,libx264,libx265,libfdkaac,libvpx]
    steps:
    - name: Set up MSYS2
      uses: msys2/setup-msys2@v2
      with:
        install: base-devel binutils mingw-w64-x86_64-cmake nasm
        path-type: inherit
    - name: Set up GIT
      run: |
        git config --global core.autocrlf false
        git config --global core.eol lf
        git config --global user.email "daniel.stankewitz@gmail.com"
        git config --global user.name "Daniel Stankewitz"
    - name: Checkout patches
      uses: actions/checkout@v3.0.0
    - name: Checkout FFmpeg
      if: ${{ inputs.source == 'ffmpeg' }} 
      uses: actions/checkout@v3.0.0
      with:
        repository: FFmpeg/FFmpeg.git
        ref: ${{ inputs.ffmpegRef }} 
        path: ffmpeg
    - name: Checkout NvEnc
      uses: actions/checkout@v3.0.0
      with:
        repository: FFmpeg/nv-codec-headers
        ref: ${{ inputs.nvencRef }} 
        path: nvenc
    - name: Checkout AMF
      uses: actions/checkout@v3.0.0
      with:
        repository: GPUOpen-LibrariesAndSDKs/AMF
        ref: ${{ inputs.amfRef }} 
        path: amf
    - name: Set up artifacts
      uses: actions/download-artifact@v3
      with:
        path: build_artifacts
    - name: Build FFmpeg
      shell: cmd
      run: |
        call "${{ env.vsPath }}VC\Auxiliary\Build\vcvars64.bat"
        md build dist
        D:\a\_temp\setup-msys2\msys2.cmd -c 'cd ffmpeg ; git apply --ignore-whitespace --verbose ../0003-dynamic-loading-of-shared-fdk-aac-library-5.0.patch ; sed -i "s/#define X264_API_IMPORTS 1/\/\/#define X264_API_IMPORTS 1/g" libavcodec/libx264.c ; cd ../build ; for file in `ls ../build_artifacts/**/*.tgz`; do tar -xzf $file; done ; rm -f bin/*.dll ; cd ../nvenc ; make PREFIX=../build install ; cp -a ../amf/amf/public/include ../build/include/AMF ; cd ../ffmpeg ; PKG_CONFIG_PATH=../build/lib/pkgconfig ./configure --toolchain=msvc --extra-cflags="${{ env.cFlags }} -I../build/include" --extra-ldflags="-LIBPATH:../build/lib" --prefix=../build --pkg-config-flags="--static" --disable-doc ${{ env.variant }} --enable-runtime-cpudetect --disable-devices --disable-demuxers --disable-decoders --disable-network --enable-w32threads --enable-gpl ${{ env.COMPONENTS }} ; make ; make install ; cd ../build/lib ; for file in *.a; do mv "$file" "`basename "$file" .a`.lib" ; done ; rm -rf fdk-aac.lib cmake pkgconfig *.la ../share ; cd .. ; tar czf ../dist/ffmpeg-win64-${{ inputs.type }}-${{ inputs.config }}.tar.gz *'
    - name: Publish FFmpeg artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.config }} package build
        path: dist/ffmpeg-win64-${{ inputs.type }}-${{ inputs.config }}.tar.gz
