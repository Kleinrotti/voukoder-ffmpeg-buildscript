name: 'Build FFmpeg (LGPL)'

on:
  workflow_dispatch:
    inputs:
      config:
        type: choice
        required: true
        default: 'release' 
        description: 'Configuration'
        options: 
        - debug
        - release
        
      ffmpegRef:
        type: string
        required: true
        default: 'release/6.1' 
        description: 'FFmpeg refId'
        
  workflow_call:
    inputs:
      config:
        type: string
        required: true
      ffmpegRef:
        type: string
        required: true
        
env:
  vsPath: C:\Program Files\Microsoft Visual Studio\2022\Enterprise\
  COMPONENTS: "--enable-libvpl --enable-libsvtav1 --enable-libsnappy --enable-libmp3lame --enable-libzimg --enable-libvpx --enable-libopus "
  #--enable-libvorbis
  NASM_EXECUTABLE: nasm
  cFlags: ${{ inputs.config == 'release' && '-MD' || '-MDd' }}
  variant: ' --disable-static --enable-shared --build-suffix=-voukoderpro'
  msbuildConfig: ${{ inputs.config == 'release' && 'Release' || 'Debug' }}
  system: windows-2022
  type: shared

jobs:
  libvpl:
    runs-on: ${{ env.system }}
    steps:
    - uses: actions/checkout@v3
    - uses: ./.github/actions/libvpl
      with:
        refId: v2023.3.1
        config: ${{ inputs.config }}

  #liboggvorbis:
  #  runs-on: ${{ inputs.system }}
  #  steps:
  #  - uses: actions/checkout@v3
  #  - uses: ./.github/actions/liboggvorbis
  #    with:
  #      libogg_refId: v1.3.5
  #      libvorbis_refId: v1.3.7
  #      config: ${{ inputs.config }}
               
  libsvtav1:
    runs-on: ${{ env.system }}
    steps:
    - uses: actions/checkout@v3
    - uses: ./.github/actions/libsvtav1
      with:
        refId: v1.4.1
        config: ${{ inputs.config }}

  libsnappy:
    runs-on: ${{ env.system }}
    steps:
    - uses: actions/checkout@v3
    - uses: ./.github/actions/libsnappy
      with:
        refId: 1.1.9
        config: ${{ inputs.config }}

  libvpx:
    runs-on: ${{ env.system }}
    steps:
    - uses: actions/checkout@v3
    - uses: ./.github/actions/libvpx
      with:
        refId: v1.13.0
        config: ${{ inputs.config }}

  libmp3lame:
    runs-on: ${{ env.system }}
    steps:
    - uses: actions/checkout@v3
    - uses: ./.github/actions/libmp3lame
      with:
        refId: tags/RELEASE__3_100
        config: ${{ inputs.config }}

  libzimg:
    runs-on: ${{ env.system }}
    steps:
    - uses: actions/checkout@v3
    - uses: ./.github/actions/libzimg
      with:
        refId: release-3.0.4
        config: ${{ inputs.config }}

  libopus:
    runs-on: ${{ env.system }}
    steps:
    - uses: actions/checkout@v3
    - uses: ./.github/actions/libopus
      with:
        refId: v1.3.1
        config: ${{ inputs.config }}

  ffmpeg:
    runs-on: ${{ env.system }}
    needs: [libvpl,libsvtav1,libsnappy,libvpx,libmp3lame,libzimg,libopus]
    #liboggvorbis
    steps:
    - name: Set up MSYS2
      uses: msys2/setup-msys2@v2
      with:
        install: base-devel binutils mingw-w64-x86_64-cmake nasm
        path-type: inherit
    - name: Create PFX certificate
      id: create-pfx
      shell: pwsh
      env:
        PFX_CONTENT: ${{ secrets.CODESIGN_PFX }} 
      run: |
        $pfxPath = Join-Path -Path $env:RUNNER_TEMP -ChildPath "cert.pfx"; 
        $encodedBytes = [System.Convert]::FromBase64String($env:PFX_CONTENT); 
        Set-Content $pfxPath -Value $encodedBytes -AsByteStream;
        Write-Output "::set-output name=PFX_PATH::$pfxPath";        
    - name: Set up GIT
      run: |
        git config --global core.autocrlf false
        git config --global core.eol lf
        git config --global user.email "daniel.stankewitz@gmail.com"
        git config --global user.name "Daniel Stankewitz"
    - name: Checkout patches
      uses: actions/checkout@v3.0.0
    - name: Checkout FFmpeg
      uses: actions/checkout@v3.0.0
      with:
        repository: FFmpeg/FFmpeg.git
        ref: ${{ inputs.ffmpegRef }} 
        path: ffmpeg
    - name: Checkout NvEnc
      uses: actions/checkout@v3.0.0
      with:
        repository: FFmpeg/nv-codec-headers
        ref: master
        path: nvenc
    - name: Checkout AMF
      uses: actions/checkout@v3.0.0
      with:
        repository: GPUOpen-LibrariesAndSDKs/AMF
        ref: master
        path: amf
    - name: Set up artifacts
      uses: actions/download-artifact@v3
      with:
        path: build_artifacts
    - name: Build FFmpeg
      shell: cmd
      run: |
        call "${{ env.vsPath }}VC\Auxiliary\Build\vcvars64.bat"
        md build dist
        D:\a\_temp\setup-msys2\msys2.cmd -c 'cd build ; for file in `ls ../build_artifacts/**/*.tgz`; do tar -xzf $file; done ; rm -f bin/*.dll ; cd ../nvenc ; make PREFIX=../build install ; cp -a ../amf/amf/public/include ../build/include/AMF ; cd ../ffmpeg ; PKG_CONFIG_PATH=../build/lib/pkgconfig ./configure --toolchain=msvc --extra-cflags="${{ env.cFlags }} -I../build/include" --extra-ldflags="-LIBPATH:../build/lib" --prefix=../build --extra-libs=Ole32.lib --extra-libs=Advapi32.lib --disable-doc ${{ env.variant }} --enable-runtime-cpudetect --enable-w32threads --enable-cuda ${{ env.COMPONENTS }} ; make -j 2 ; make install ; cd ../build/lib ;  rm -rf cmake pkgconfig *.la ; cd .. ; tar czf ../dist/ffmpeg-win64-${{ inputs.type }}-${{ inputs.config }}.tar.gz *'
    - name: Publish FFmpeg artifacts
      uses: actions/upload-artifact@v3
      with:
        name: FFmpeg ${{ env.system }} ${{ inputs.config }}${{ inputs.config }} package build
        path: dist/ffmpeg-win64-${{ env.type }}-${{ inputs.config }}.tar.gz
